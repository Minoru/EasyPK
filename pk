#!/bin/bash

#
#  PacK script
#
#  Copyright 2009 Zend
#  Copyright 2009, 2010 Alexander Batischev
#
#  This file is part of EasyPK.
#
#  EasyPK is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  EasyPK is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with EasyPK.  If not, see <http://www.gnu.org/licenses/>.
#

help() {
    echo "USAGE: `basename $0` -h | tar|tbz|tbz2|tgz|bz2|gz|7z|zip|rar [-d] [-o outfile] file1 [file2 [file3 ...]]"
    echo ""
    echo "-o outfile  --  set name of archive to \"outfile\""
    echo "-h          --  shows this help note"
    echo "-d          --  delete files after packing"
}

# exit with code 3 if Ctrl+C has been pressed or any of other terminating
#  signals has been sent
trap "exit 3" KILL TERM HUP INT

getFilenames () {
    while [ -n "$1" ]
    do
        # if current file isn't output file...
        if [ "$1" != "$out" ]
        then
            if [ -z "$files" ]
            then
                files="\"$1\""
            else
                files="$files \"$1\""
            fi
        
            if [ -z "$out2" ]
            then
                out2="$1"
            fi
        
            shift
            let "count++"
        fi
    done
}

setOutFilenames() {
    # sets output fielnames
    if [ -z "$out" ]
    then
        if [ "$count" -eq "1" ]
        then
            out="$out2.$1"
        else
            out="`basename \"$(pwd)\"`.$1"
        fi
    fi
}

checkForOutFile() {
    out="$1"

    if [ -e "$out" ]
    then
        echo -n "Warning: output file ($out) already exist. Want it to be owerwritten? (Y/N) "
        read -n 1 answer
        echo
        if [ "$answer" != "Y" -a "$answer" != "y" ]
            then
                return 0
            else
                return 1
            fi
    else
        return 1
    fi
}

# Initializing variables
format="$1" && shift # tar, tbz, tgz, bz and so on
files="" # list of files to pack
count="0" # amount of files given to script
out="" # archive filename
out2="" # archive filename; used by tar, tbz and so when only one file given
deleteAfter=false

# checking for pv
if command -v pv &>/dev/null
then
    pv_avaliable=true
else
    pv_avaliable=false
    echo "Warning: pv not found. Please install it for displaying nice progress bars, speed and estimated time while packing."
fi

# Some arguments which you want to pass to archivators
bzip2args="--best"
gzipargs="--best"
zipargs="-mx9"
lzmaargs="-m0=lzma"
rarargs="-m5"


# parse parameters given to script
while getopts ":hdo:" option
do
    case $option in
        h)
            help
            exit
        ;;
    
        o)
            out="$OPTARG"
        ;;

        d)
            deleteAfter=true
        ;;
    esac
done
shift $(($OPTIND - 1))

# Check parameters
if [ -z "$format" ]
then
    echo "Specify archive format please. See `basename $0` -h for details."
    exit 1
else
    if [ "$format" == "-h" ]
    then
        help
        exit
    fi

    if [ -z "$*" ]
    then
        echo "Specify files to pack please. See `basename $0` -h for details."
        exit 2
    fi
fi

# Real work starts here!
case $format in
    tar)
        getFilenames "$@"
        
        setOutFilenames "tar"

        checkForOutFile "$out" && exit

        if [ $pv_avaliable == true ]
        then
            size=`eval du --bytes --total -- $files | tail -1 | grep --only-matching '^[0-9]*'`
            echo "${out}:"
            eval tar --create --file - -- $files | pv --size $size >"$out"
        else
            eval tar --create --verbose --file -- "$out" $files
        fi

        $deleteAfter && eval rm --force --recursive $files
        ;;

    
    tbz|tbz2)
        getFilenames "$@"

        setOutFilenames "tar.bz2"

        checkForOutFile "$out" && exit

        if [ $pv_avaliable == true ]
        then
            size=`eval du --bytes --total -- $files | tail -1 | grep --only-matching '^[0-9]*'`
            echo "${out}:"
            eval tar --create --file - -- $files | pv --size $size | bzip2 --stdout $bzip2args - >"$out"
        else
            eval tar --create --verbose --file - -- $files | bzip2 --stdout $bzip2args - >"$out"
        fi

        $deleteAfter && eval rm --force --recursive $files
        ;;


    tgz)
        getFilenames "$@"

        setOutFilenames "tar.gz"

        checkForOutFile "$out" && exit

        if [ $pv_avaliable == true ]
        then
            size=`eval du --bytes --total -- $files | tail -1 | grep --only-matching '^[0-9]*'`
            echo "${out}:"
            eval tar --create --file - -- $files | pv --size $size | gzip --stdout $gzipargs - >"$out"
        else
            eval tar --create --verbose --file - -- $files | gzip --stdout $gzipgargs - >"$out"
        fi

        $deleteAfter && eval rm --force --recursive $files
        ;;
    
    
    bz2)
        if [ $pv_avaliable == true ]
        then
            while [ -n "$1" ]
            do
                checkForOutFile "$1.bz2" && shift && continue

                if [ -f "$1" ]
                then
                    echo "${out}:"
                    pv -- "$1" | bzip2 --stdout $bzip2args - >"$1.bz2"
                else
                    echo "“$1” is not a regular file, bzip2 can not process it!"
                fi

                $deleteAfter && rm --force "$1"

                shift
            done
        else
            while [ -n "$1" ]
            do
                checkForOutFile "$1.bz2" && shift && continue

                if [ -f "$1" ]
                then
                    bzip2 --stdout $bzip2args -- "$1" >"$1.bz2"
                else
                    echo "“$1” is not a regular file, bzip2 can not process it!"
                fi
                
                $deleteAfter && rm --force "$1"

                shift
            done
        fi
        ;;
    
    
    gz)
        if [ $pv_avaliable == true ]
        then
            while [ -n "$1" ]
            do
                checkForOutFile "$1.gz" && shift && continue

                if [ -f "$1" ]
                then
                    echo "${out}:"
                    pv -- "$1" | gzip --stdout $gzipargs - >"$1.gz"
                else
                    echo "”$1” is not a regular file, gzip can not process it!"
                fi

                $deleteAfter && rm --force "$1"

                shift
            done
        else
            while [ -n "$1" ]
            do
                checkForOutFile "$1.gz" && shift && continue

                if [ -f "$1" ]
                then
                    gzip --stdout $gzipargs -- "$1" >"$1.gz"
                else
                    echo "“$1” is not a regular file, gzip can not precess it!"
                fi

                $deleteAfter && rm --force "$1"

                shift
            done
        fi
        ;;
    
    
    zip)
        getFilenames "$@"

        setOutFilenames "zip"

        checkForOutFile "$out" && exit
        
        eval 7z a -tzip $zipargs -- \"$out\" $files 

        $deleteAfter && eval rm --force --recursive $files
        ;;


    7z)
        getFilenames "$@"

        setOutFilenames "7z" 

        checkForOutFile "$out" && exit
        
        eval 7z a $lzmaargs -- \"$out\" $files

        $deleteAfter && eval rm --force --recursive $files
        ;;

    rar)
        getFilenames "$@"

        setOutFilenames "rar"

        checkForOutFile "$out" && exit

        eval rar a -r $rarargs -- \"$out\" $files

        $deleteAfter && eval rm --force --recursive $files
        ;;


    *)
        echo "'$format' isn't supported archive format. See `basename $0` -h for details."
        ;;
esac

