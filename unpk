#!/bin/bash

#
#  UNPacK script
#
#  Copyright 2009 Zend
#  Copyright 2009, 2010, 2011 Alexander Batischev
#
#  This file is part of EasyPK.
#
#  EasyPK is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  EasyPK is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with EasyPK.  If not, see <http://www.gnu.org/licenses/>.
#

help() {
    echo "USAGE: `basename $0` [ -h ] | [-d] file1 [file2 [file3 ...]]"
    echo "Supported archive formats are: tar, tar.bz2, tar.gz, bz2, gz, 7z, zip, rar, xz, tar.xz."
    echo "-h  --  show this note"
    echo "-d  --  delete archive after unpacking"
}

# exit with code 3 if Ctrl+C has been pressed or any other terminating signal
#  has been sent
trap "exit 3" KILL TERM HUP INT

prepareTmp() {
    # prepares temp directory

    tmp=".EasyPK-`echo $$ | base64 | sed 's/[^[:alpha:]]//g'`"
    mkdir "$tmp" && cd "$tmp"
}

clearTmp() {
    # clearTmp type_of_archive name_of_archive

    name="`basename "$2" .$1`"

    # invariant: we're in $tmp now

    if [ "`/bin/ls -1 | wc --lines`" -eq "1" ]
    then
        # if there is only one file in the directory...
        if [ -e "../`/bin/ls`" ]
        then
            echo "\"`/bin/ls -1`\" already exists, quitting!"

            # "unhiding" temporary directory
            tmp=${tmp##.}
            mv "../.$tmp" "../$tmp"
            echo "By the way, you can pick your unpacked files in a directory called $tmp"
            exit 4
        fi
        mv * ..
        cd ..
        rmdir "$tmp"
    else
        for file in `/bin/ls -1`
        do
            if [ -e "../$file" ]
            then
                echo "\"$file\" already exists, quitting!"

                # "unhiding" temporary directory
                tmp=${tmp##.}
                mv "../.$tmp" "../$tmp"
                echo "By the way, you can pick your unpacked files in a directory called $tmp"
                exit 4
            fi
        done
        cd ..
        mv "$tmp" "$name"
    fi
}

#Initializing variables
tmp=""
deleteAfter=false
unpkSuccess=false

# checking options
while getopts ":hd" option
do
    case $option in
        h)
            help
            exit
        ;;

        d)
            deleteAfter=true
        ;;
    esac
done
shift $(($OPTIND - 1))

if [ -z "$*" ]
then
    echo "Specify files to unpack please. See `basename $0` -h for details."
    exit 2
fi

# checking for pv
if command -v pv &>/dev/null
then
    pv_available=true
else
    pv_available=false
    echo "Warning: pv not found. Please install it for displaying nice progress bars, speed and estimated time while packing."
fi

# checking for pbzip2
if command -v pbzip2 &>/dev/null
then
    bunzip2="`command -v pbzip2` --decompress"
else
    bunzip2="`command -v bunzip2`"
fi

# checking for pigz
if command -v pigz &>/dev/null
then
    gunzip="`command -v pigz` --decompress"
else
    gunzip="`command -v gunzip`"
fi

while [ -n "$1" ]
do
    case $1 in
        *.tar)
            prepareTmp

            if [ $pv_available == true ]
            then
                echo "$1:"
                pv -- "../$1" | tar --extract --file -
            else
                tar --extract --verbose --file "../$1"
            fi

            if [ "$?" == "0" ]
            then
                unpkSuccess=true
            fi

            clearTmp "tar" "$1"
            ;;


        *.tar.bz2|*.tbz|*.tbz2)
            prepareTmp

            if [ $pv_available == true ]
            then
                echo "$1:"
                pv -- "../$1" | $bunzip2 --stdout | tar --extract --file -
            else
                $bunzip "../$1" | tar --extract --verbose --file -
            fi

            if [ "$?" == "0" ]
            then
                unpkSuccess=true
            fi

            case $1 in
                *.tar.bz2) clearTmp "tar.bz2" "$1" ;;
                *.tbz)     clearTmp "tbz" "$1" ;;
                *.tbz2)    clearTmp "tbz2" "$1" ;;
            esac
            ;;

    
        *.tar.gz|*.tgz)
            prepareTmp

            if [ $pv_available == true ]
            then
                echo "$1:"
                pv -- "../$1" | $gunzip --stdout | tar --extract --file -
            else
                $gunzip "../$1" | tar --extract --verbose --file -
            fi
 
            if [ "$?" == "0" ]
            then
                unpkSuccess=true
            fi
           
            case $1 in
                *.tar.gz) clearTmp "tar.gz" "$1" ;;
                *.tgz)    clearTmp "tgz" "$1" ;;
            esac
            ;;


        *.tar.xz)
            prepareTmp

            if [ $pv_available == true ]
            then
                echo "$1:"
                pv -- "../$1" | unxz | tar --extract --file -
            else
                unxz "../$1" | tar --extract --file -
            fi

            if [ "$?" == "0" ]
            then
                unpkSuccess=true
            fi

            clearTmp "tar.xz" "$1"
            ;;


        *.bz2)
            out="${1%%.bz2}"
            if [ $pv_available == true ]
            then
                echo "$1:"
                pv -- "$1" | $bunzip2 --stdout - >"$out"
            else
                $bunzip2 --stdout --verbose "$1" >"$out"
            fi

            if [ "$?" == "0" ]
            then
                unpkSuccess=true
            fi
            ;;


        *.gz)
            out="${1%%.gz}"
            if [ $pv_available == true ]
            then
                echo "$1:"
                pv -- "$1" | $gunzip --stdout - >"$out"
            else
                $gunzip --stdout --verbose "$1" >"$out"
            fi

            if [ "$?" == "0" ]
            then
                unpkSuccess=true
            fi
            ;;


        *.xz)
            out="${1%%.xz}"
            if [ $pv_available == true ]
            then
                echo "$1:"
                pv -- "$1" | unxz >"$out"
            else
                unxz --verbose "$1" >"$out"
            fi

            if [ "$?" == "0" ]
            then
                unpkSuccess=true
            fi
            ;;


        *.7z)
            prepareTmp

            7z x -- "../$1"

            if [ "$?" == "0" ]
            then
                unpkSuccess=true
            fi

            clearTmp "7z" "$1"
            ;;


        *.zip)
            prepareTmp

            7z x -- "../$1"

            if [ "$?" == "0" ]
            then
                unpkSuccess=true
            fi

            clearTmp "zip" "$1"
            ;;


        *.rar)
            prepareTmp

            7z x -- "../$1"

            if [ "$?" == "0" ]
            then
                unpkSuccess=true
            fi

            clearTmp "rar" "$1"
            ;;


        *)
            echo "Can't recognize format of '$1'. See `basename $0` -h for details."
            exit 1
            ;;
    esac

    $deleteAfter && $unpkSuccess && rm "$1"

    shift
done

